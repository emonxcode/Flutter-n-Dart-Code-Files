// add this file to main for new entry point for overlay

@pragma("vm:entry-point")
void overlayMain() {
  WidgetsFlutterBinding.ensureInitialized();
  runApp(
    const MaterialApp(
      debugShowCheckedModeBanner: false,
      home: DisplayOverlay(),
    ),
  );
}



// overlay widget for show video player

import 'package:better_player_plus/better_player_plus.dart';
import 'package:chewie/chewie.dart';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutter_overlay_window/flutter_overlay_window.dart';
import 'package:poultry_agricare_app/core/local_data/shared_preference_helper.dart';
import 'package:video_player/video_player.dart';
import 'package:youtube_explode_dart/youtube_explode_dart.dart';

class DisplayOverlay extends StatefulWidget {
  const DisplayOverlay({Key? key}) : super(key: key);

  @override
  State<DisplayOverlay> createState() => _DisplayOverlayState();
}

class _DisplayOverlayState extends State<DisplayOverlay> {
  VideoPlayerController? _videoPlayerController;
  ChewieController? _chewieController;
  bool _isLoading = false;
  String url = '';
  String videoType = 'YouTube';
  bool isReadyToPlay = false;

  Future<void> _initializePlayer() async {
    setState(() {
      isReadyToPlay = false;
      _isLoading = true;
    });
    await LocalData.init();
    videoType = await LocalData.getVideoType();
    if (videoType == 'YouTube') {
      var ytVideoUrl = await LocalData.getVideoUrl();
      var youtube = YoutubeExplode();
      var video = await youtube.videos.get(ytVideoUrl);
      var manifest = await youtube.videos.streamsClient.getManifest(video.id);
      var streamInfo = manifest.muxed.withHighestBitrate();
      url = streamInfo.url.toString();

      _videoPlayerController = VideoPlayerController.networkUrl(
          Uri.parse(streamInfo.url.toString()));
      await _videoPlayerController!.initialize();

      _chewieController = ChewieController(
        videoPlayerController: _videoPlayerController!,
        autoPlay: true,
        looping: true,
        deviceOrientationsAfterFullScreen: [
          DeviceOrientation.landscapeLeft,
          DeviceOrientation.landscapeRight,
        ],
        deviceOrientationsOnEnterFullScreen: [
          DeviceOrientation.landscapeLeft,
          DeviceOrientation.landscapeRight,
        ],
      );
    } else {
      url = await LocalData.getVideoUrl();
    }

    setState(() {
      isReadyToPlay = true;
      _isLoading = false;
    });
  }

  @override
  void dispose() {
    _videoPlayerController!.dispose();
    _chewieController!.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.black,
      body: Stack(
        children: [
          Container(
            height: double.infinity,
            width: double.infinity,
            padding: const EdgeInsets.symmetric(vertical: 12.0),
            decoration: BoxDecoration(
              borderRadius: BorderRadius.circular(10),
            ),
            child: Column(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                _isLoading
                    ? const Center(
                        child: CircularProgressIndicator(
                          color: Colors.green,
                        ),
                      )
                    : !isReadyToPlay
                        ? IconButton(
                            onPressed: () async {
                              if (videoType == 'YouTube') {
                                _initializePlayer();
                              } else {
                                setState(() {
                                  isReadyToPlay = false;
                                  _isLoading = true;
                                });
                                await LocalData.init();
                                videoType = await LocalData.getVideoType();
                                url = await LocalData.getVideoUrl();
                                setState(() {
                                  isReadyToPlay = true;
                                  _isLoading = false;
                                });
                              }
                            },
                            icon: const Icon(
                              Icons.play_circle,
                              color: Colors.green,
                              size: 50,
                            ),
                          )
                        : AspectRatio(
                            aspectRatio: 16 / 9,
                            child: videoType == 'YouTube'
                                ? Chewie(controller: _chewieController!)
                                : videoType == 'local'
                                    ? BetterPlayer.network(url)
                                    : BetterPlayer.file(url)),
              ],
            ),
          ),
          Positioned(
            right: 5,
            top: 5,
            child: Container(
              decoration: const BoxDecoration(
                  shape: BoxShape.circle,
                  color: Color.fromARGB(75, 255, 255, 255)),
              child: IconButton(
                onPressed: () async {
                  try {
                    if (_videoPlayerController != null) {
                      await _videoPlayerController!.pause();
                    }

                    _videoPlayerController!.dispose();
                    _chewieController!.dispose();

                    _videoPlayerController = null;
                    _chewieController = null;
                    _isLoading = false;
                    isReadyToPlay = false;

                    setState(() {});
                    await Future.delayed(const Duration(milliseconds: 500));
                  } catch (exception) {
                    debugPrint(exception.toString());
                  }
                  FlutterOverlayWindow.closeOverlay();
                },
                icon: const Icon(Icons.close),
              ),
            ),
          ),
        ],
      ),
    );
  }
}



// trigger overlay

   if (await FlutterOverlayWindow.isActive()) {
      await FlutterOverlayWindow.closeOverlay();
    }

    await FlutterOverlayWindow.showOverlay(
      enableDrag: true,
      overlayTitle: "X-SLAYER",
      overlayContent: 'Overlay Enabled',
      flag: OverlayFlag.focusPointer,
      visibility: NotificationVisibility.visibilityPublic,
      positionGravity: PositionGravity.auto,
      height: (MediaQuery.of(context).size.height * 0.6).toInt(),
      width: WindowSize.matchParent,
      startPosition: const OverlayPosition(0, -259),
    );
