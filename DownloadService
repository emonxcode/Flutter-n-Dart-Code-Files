import 'dart:io';
import 'package:http/http.dart' as http;
import 'package:path_provider/path_provider.dart';
import 'package:permission_handler/permission_handler.dart';
import 'package:youtube_explode_dart/youtube_explode_dart.dart';
import 'package:path/path.dart' as path;

enum VideoType{
  youtube,
  mp4
}

class DownloadService {
  Future<(bool, String?)> downloadVideo(
      {
        required String folderName,
        required String fileName,
        required  String? videoUrl,
        required  VideoType videoType,
        required  Function(int, int) onProgress}) async {
    if (await Permission.storage.isDenied) {
      var result = await _requestPermission(Permission.storage);
      if(!result){
        return (false, null);
      }
    }
    
    if(videoType == VideoType.youtube){
       videoUrl = await _extractVideoUrl(videoUrl!);
    }

    if (videoUrl != null) {
      return (true,  await _downloadFile(videoUrl, folderName , '$fileName.mp4', onProgress));
    }
    return (false, null);
  }

  Future<String?> _extractVideoUrl(String url) async {
    try {
      var yt = YoutubeExplode();
      var video = await yt.videos.get(url);
      var manifest = await yt.videos.streamsClient.getManifest(video.id);
      var streamInfo = manifest.muxed.withHighestBitrate();

      if (streamInfo != null) {
        return streamInfo.url.toString();
      }
    } catch (e) {
      print('Error: $e');
    }
    return null;
  }

  Future<String?> _downloadFile(String url, String folderName, String filename, Function(int, int) onProgress) async {
    
    try {
      var request = http.Request('GET', Uri.parse(url));
      var response = await request.send();

      var totalBytes = response.contentLength ?? -1;
      var receivedBytes = 0;

      var directory = await getDownloadsDirectory();
      final newFolderPath = path.join(directory!.path, folderName);
      await Directory(newFolderPath).create(recursive: true);

      var filePath = '$newFolderPath/$filename';
      var file = File(filePath);
      var fileStream = file.openWrite();

      response.stream.listen((chunk) {
        fileStream.add(chunk);
        receivedBytes += chunk.length;
        onProgress(receivedBytes, totalBytes);
      }, onDone: () async {
        await fileStream.flush();
        await fileStream.close();
      }, onError: (e) {
        print('Error: $e');
      });

      return filePath;
    } catch (e) {
      print('Error: $e');
    }
    return null;
  }

  Future<bool> _requestPermission(Permission permission) async {
    if (await permission.isGranted) {
      return true;
    } else {
      var result = await permission.request();
      return result == PermissionStatus.granted;
    }
  }
}




/// usecases

  final DownloadService _downloadService = serviceLocator();
  double _progress = 0.0;
  double get getDownloadProgress => _progress;

  void downloadVideo(
      {required String courseName,
      required List<Map<String, String>> lessons,
      required BuildContext context}) async {
    _progress = 1;
    rebuild();

    for (var lesson in lessons) {
      final (status, resultUrl) = await _downloadService.downloadVideo(
        folderName: courseName,
        videoUrl: lesson['url']!,
        fileName: lesson['fileName']!,
        videoType: VideoType.youtube,
        onProgress: (received, total) {
          log('downloading...' + ((received / total) * 100).ceil().toString());
          _progress = (received / total) * 100;
          rebuild();
          if ((received / total) == 1.0) {
            showSnackBar(
              context: context,
              snackText: 'Download complete!',
              snackBackgroundColor: ColorPallete.primaryColor,
              snackTextColor: ColorPallete.whiteColor,
            );
          }
        },
      );

      log(resultUrl.toString());
      if (status) {
        showSnackBar(
          context: context,
          snackText: 'Download started, please don\'t close the app',
          snackBackgroundColor: ColorPallete.primaryColor,
          snackTextColor: ColorPallete.whiteColor,
        );
      } else {
        showSnackBar(
          context: context,
          snackText: 'Download failed!',
          snackBackgroundColor: ColorPallete.redColor,
          snackTextColor: ColorPallete.whiteColor,
        );
      }
      rebuild();
    }
    // _progress = -1;
    //  rebuild();
  }
